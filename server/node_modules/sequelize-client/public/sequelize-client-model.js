(function (sequelize, $, undefined) {

    sequelize.Model = function (options, $rootScope, $q, $http, $io) {

        var $scope = $rootScope.$new();

        $.extend(this, options);

        var _data = [];

        Object.defineProperty(this, 'data', {
            get: function () {
                return _data
            }
        })


        var getId = function (data) {

            var keys = _.keys(options.attributes);
            keys = _.map(keys, function (key) {
                return {name: key};
            });

            var attributes = _.toArray(options.attributes);
            attributes = _.merge(attributes, keys);

            var primaryKeyTokens = _.where(attributes, {primaryKey: true});
            var primaryKeyValues = _.map(primaryKeyTokens, function (primaryKeyToken) {
                return data[primaryKeyToken.name];
            });

            var primaryKey = primaryKeyValues.join('-');
            return primaryKey;
        }


        this.sync = function () {

            var deferred = $q.defer();

            $http.get('/api/' + options.name).then(
                function (result) {

                    _data = result.data.data;

                    $io.connect('/' + options.name)
                        .on('afterCreate', function (result) {
                            $scope.$apply(function () {
                                _data.push(result);
                            });
                        })
                        .on('afterDelete', function (result) {
                            var id = getId(result);
                            $scope.$apply(function () {
                                var existingItem = _.find(_data, function (item) {
                                    return getId(item) == id;
                                })
                                _.remove(_data, existingItem);
                            });
                        });

                    deferred.resolve(result);
                },
                function (error) {
                    deferred.reject(error);
                }
            )

            return deferred.promise;
        }
    }

}(window.sequelize = window.sequelize || {}, jQuery));